{"ast":null,"code":"var _jsxFileName = \"D:\\\\rikkei\\\\bearcle\\\\React Typescript\\\\react-ts-file\\\\src\\\\contexts\\\\DraggableContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useState, createContext, useRef, useEffect } from \"react\";\n\n// context cho tính năng kéo thả\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultDraggableValue = {\n  positions: {},\n  handleStop: () => () => {},\n  handleStart: () => () => {},\n  canvasItems: [],\n  handleDropOnCanvas: () => {},\n  canvasRef: /*#__PURE__*/React.createRef()\n};\nconst DraggableContext = /*#__PURE__*/createContext(defaultDraggableValue);\n\n// custom hook để truy cập vào giá trị của Draggble context\nexport const useDraggble = () => {\n  _s();\n  return useContext(DraggableContext);\n};\n\n// component để chia sẻ logic và state liên quan tới kéo thả\n_s(useDraggble, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const DraggableProvider = ({\n  children\n}) => {\n  _s2();\n  const [canvasItems, setCanvasItems] = useState([]);\n  const [positions, setPositions] = useState({\n    rectangle: {\n      x: 0,\n      y: 0\n    },\n    circle: {\n      x: 0,\n      y: 0\n    },\n    vector: {\n      x: 0,\n      y: 0\n    }\n  });\n  const initialPositionsRef = useRef({});\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (!initialPositionsRef.current[\"rectangle\"]) {\n      initialPositionsRef.current[\"rectangle\"] = positions[\"rectangle\"];\n    }\n    if (!initialPositionsRef.current[\"circle\"]) {\n      initialPositionsRef.current[\"circle\"] = positions[\"circle\"];\n    }\n    if (!initialPositionsRef.current[\"vector\"]) {\n      initialPositionsRef.current[\"vector\"] = positions[\"vector\"];\n    }\n  }, [positions]);\n\n  // lưu vị trí ban đầu của hình\n  const handleStart = id => (e, data) => {\n    initialPositionsRef.current[id] = {\n      x: data.x,\n      y: data.y\n    };\n  };\n\n  // hàm xử lý khi việc kéo kết thúc\n  const handleStop = id => (e, data) => {\n    if (canvasRef.current) {\n      // kiểm tra vị trí của canvas và các hình\n      const canvasRect = canvasRef.current.getBoundingClientRect();\n      const itemRect = e.target.getBoundingClientRect();\n\n      // kiểm tra xem hình có nằm trong vùng canvas không\n      const isInsideCanvas = itemRect.left >= canvasRect.left && itemRect.right <= canvasRect.right && itemRect.top >= canvasRect.top && itemRect.bottom <= canvasRect.bottom;\n      if (!isInsideCanvas) {\n        setPositions(prevPositons => ({\n          ...prevPositons,\n          [id]: initialPositionsRef.current[id]\n        }));\n      } else {\n        setPositions(prevPositions => ({\n          ...prevPositions,\n          [id]: {\n            x: data.x,\n            y: data.y\n          }\n        }));\n        initialPositionsRef.current[id] = {\n          x: data.x,\n          y: data.y\n        };\n      }\n    }\n  };\n  const handleDropOnCanvas = itemType => {\n    setCanvasItems(prevItems => [...prevItems, {\n      type: itemType,\n      id: Date.now()\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(DraggableContext.Provider, {\n    value: {\n      positions,\n      handleStop,\n      handleStart,\n      handleDropOnCanvas,\n      canvasItems,\n      canvasRef\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s2(DraggableProvider, \"9JxE9PYDLbZVurE5JYAr7JHmX6A=\");\n_c = DraggableProvider;\nvar _c;\n$RefreshReg$(_c, \"DraggableProvider\");","map":{"version":3,"names":["React","useContext","useState","createContext","useRef","useEffect","jsxDEV","_jsxDEV","defaultDraggableValue","positions","handleStop","handleStart","canvasItems","handleDropOnCanvas","canvasRef","createRef","DraggableContext","useDraggble","_s","DraggableProvider","children","_s2","setCanvasItems","setPositions","rectangle","x","y","circle","vector","initialPositionsRef","current","id","e","data","canvasRect","getBoundingClientRect","itemRect","target","isInsideCanvas","left","right","top","bottom","prevPositons","prevPositions","itemType","prevItems","type","Date","now","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/rikkei/bearcle/React Typescript/react-ts-file/src/contexts/DraggableContext.tsx"],"sourcesContent":["import { Console } from \"console\";\r\nimport React, {\r\n  useContext,\r\n  useState,\r\n  createContext,\r\n  useRef,\r\n  useEffect,\r\n} from \"react\";\r\nimport { DraggableData, DraggableEvent } from \"react-draggable\";\r\n\r\n// context cho tính năng kéo thả\r\ntype DraggableContextType = {\r\n  positions: { [key: string]: { x: number; y: number } };\r\n  handleStop: (id: string) => (e: DraggableEvent, data: DraggableData) => void;\r\n  handleStart: (id: string) => (e: DraggableEvent, data: DraggableData) => void;\r\n  handleDropOnCanvas:(itemType:string)=>void\r\n  canvasItems:Array<{type:string,id:number}>\r\n  canvasRef: React.RefObject<HTMLDivElement>; \r\n};\r\nconst defaultDraggableValue: DraggableContextType = {\r\n  positions: {},\r\n  handleStop: () => () => {},\r\n  handleStart: () => () => {},\r\n  canvasItems: [],\r\n  handleDropOnCanvas: () => {},\r\n  canvasRef: React.createRef<HTMLDivElement>()\r\n};\r\n\r\nconst DraggableContext = createContext<DraggableContextType>(\r\n  defaultDraggableValue\r\n);\r\n\r\n// custom hook để truy cập vào giá trị của Draggble context\r\nexport const useDraggble = () => {\r\n  return useContext(DraggableContext);\r\n};\r\n\r\n// component để chia sẻ logic và state liên quan tới kéo thả\r\ntype DraggableProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\nexport const DraggableProvider = ({ children }: DraggableProviderProps) => {\r\n  const [canvasItems, setCanvasItems] = useState<Array<{ type: string; id: number }>>([]);\r\n\r\n  const [positions, setPositions] = useState<{\r\n    [key: string]: { x: number; y: number };\r\n  }>({\r\n    rectangle: { x: 0, y: 0 },\r\n    circle: { x: 0, y: 0 },\r\n    vector: { x: 0, y: 0 }\r\n  });\r\n  const initialPositionsRef = useRef<{\r\n    [key: string]: { x: number; y: number };\r\n  }>({});\r\n  const canvasRef = useRef<HTMLDivElement | null>(null);\r\n  useEffect(() => {\r\n    if (!initialPositionsRef.current[\"rectangle\"]) {\r\n      initialPositionsRef.current[\"rectangle\"] = positions[\"rectangle\"];\r\n    }\r\n\r\n    if (!initialPositionsRef.current[\"circle\"]) {\r\n      initialPositionsRef.current[\"circle\"] = positions[\"circle\"];\r\n    }\r\n    if (!initialPositionsRef.current[\"vector\"]) {\r\n      initialPositionsRef.current[\"vector\"] = positions[\"vector\"];\r\n    }\r\n  }, [positions]);\r\n\r\n  // lưu vị trí ban đầu của hình\r\n  const handleStart =\r\n    (id: string) => (e: DraggableEvent, data: DraggableData) => {\r\n      initialPositionsRef.current[id] = { x: data.x, y: data.y };\r\n    };\r\n\r\n  // hàm xử lý khi việc kéo kết thúc\r\n  const handleStop =\r\n    (id: string) => (e: DraggableEvent, data: DraggableData) => {\r\n      if (canvasRef.current) {\r\n        // kiểm tra vị trí của canvas và các hình\r\n        const canvasRect = canvasRef.current.getBoundingClientRect();\r\n        const itemRect = (e.target as HTMLElement).getBoundingClientRect();\r\n\r\n        // kiểm tra xem hình có nằm trong vùng canvas không\r\n        const isInsideCanvas =\r\n          itemRect.left >= canvasRect.left &&\r\n          itemRect.right <= canvasRect.right &&\r\n          itemRect.top >= canvasRect.top &&\r\n          itemRect.bottom <= canvasRect.bottom;\r\n          if (!isInsideCanvas) {\r\n            setPositions((prevPositons) => ({\r\n              ...prevPositons,\r\n              [id]: initialPositionsRef.current[id],\r\n            }));\r\n          } else {\r\n            setPositions((prevPositions) => ({\r\n              ...prevPositions,\r\n              [id]: { x: data.x, y: data.y }\r\n            }));\r\n            initialPositionsRef.current[id] = { x: data.x, y: data.y };\r\n          }\r\n        }\r\n      };\r\n      const handleDropOnCanvas=(itemType:string)=>{\r\n    \r\n        setCanvasItems((prevItems) => [...prevItems, { type: itemType, id: Date.now() }]);\r\n      }\r\n\r\n  return (\r\n    <DraggableContext.Provider value={{ positions, handleStop, handleStart,handleDropOnCanvas,canvasItems,canvasRef }}>\r\n      <div >{children}</div>\r\n    </DraggableContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}