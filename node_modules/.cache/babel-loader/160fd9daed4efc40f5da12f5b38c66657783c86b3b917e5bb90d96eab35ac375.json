{"ast":null,"code":"var _jsxFileName = \"D:\\\\rikkei\\\\bearcle\\\\React Typescript\\\\react-ts-file\\\\src\\\\contexts\\\\DraggableContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useState, createContext, useRef } from \"react\";\n\n// context cho tính năng kéo thả\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultDraggableValue = {\n  position: {\n    x: 0,\n    y: 0\n  },\n  handleStop: () => {}\n};\nconst DraggableContext = /*#__PURE__*/createContext(defaultDraggableValue);\n\n// custom hook để truy cập vào giá trị của Draggble context\nexport const useDraggble = () => {\n  _s();\n  return useContext(DraggableContext);\n};\n\n// component để chia sẻ logic và state liên quan tới kéo thả\n_s(useDraggble, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const DraggableProvider = ({\n  children\n}) => {\n  _s2();\n  const [position, setPosition] = useState({});\n  const [initialPosition, setInitialPosition] = useState({});\n  const canvasRef = useRef(null);\n\n  // lưu vị trí ban đầu của hình\n  const handleStart = id => (e, data) => {\n    setInitialPosition(prev => ({\n      ...prev,\n      [id]: {\n        x: data.x,\n        y: data.y\n      }\n    }));\n  };\n\n  // hàm xử lý khi việc kéo kết thúc\n  const handleStop = id => (e, data) => {\n    if (canvasRef.current) {\n      const canvasRect = canvasRef.current.getBoundingClientRect();\n      const itemRect = e.target.getBoundingClientRect();\n\n      // kiểm tra xem hình có nằm ngoài canvas không\n      if (itemRect.left < canvasRect.left || itemRect.right > canvasRect.right || itemRect.top < canvasRect.top || itemRect.bottom > canvasRect.bottom) {\n        setPosition(prevPositons => ({\n          ...prevPositons,\n          [id]: initialPosition[id]\n        }));\n      } else {\n        setPosition(prevPositions => ({\n          ...prevPositions,\n          [id]: {\n            x: data.lastX,\n            y: data.lastY\n          }\n        }));\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DraggableContext.Provider, {\n    value: {\n      position,\n      handleStop\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: canvasRef,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s2(DraggableProvider, \"IFo4hh26HLeVyPqNcFSDBUk55v8=\");\n_c = DraggableProvider;\nvar _c;\n$RefreshReg$(_c, \"DraggableProvider\");","map":{"version":3,"names":["React","useContext","useState","createContext","useRef","jsxDEV","_jsxDEV","defaultDraggableValue","position","x","y","handleStop","DraggableContext","useDraggble","_s","DraggableProvider","children","_s2","setPosition","initialPosition","setInitialPosition","canvasRef","handleStart","id","e","data","prev","current","canvasRect","getBoundingClientRect","itemRect","target","left","right","top","bottom","prevPositons","prevPositions","lastX","lastY","Provider","value","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/rikkei/bearcle/React Typescript/react-ts-file/src/contexts/DraggableContext.tsx"],"sourcesContent":["import React, { useContext, useState, createContext, useRef, useCallback } from \"react\";\r\nimport { DraggableData, DraggableEvent } from 'react-draggable';\r\n\r\n\r\n// context cho tính năng kéo thả\r\ntype DraggableContextType = {\r\n    position: { x: number, y: number }\r\n    handleStop: (e: DraggableEvent, data: DraggableData) => void\r\n  \r\n}\r\nconst defaultDraggableValue: DraggableContextType = {\r\n  position: { x: 0, y: 0 },\r\n  handleStop: () => {}\r\n};\r\n\r\nconst DraggableContext = createContext<DraggableContextType>(defaultDraggableValue);\r\n\r\n// custom hook để truy cập vào giá trị của Draggble context\r\nexport const useDraggble = () => {\r\n    return useContext(DraggableContext);\r\n};\r\n\r\n// component để chia sẻ logic và state liên quan tới kéo thả\r\ntype DraggableProviderProps={\r\n  children:React.ReactNode\r\n}\r\nexport const DraggableProvider = ({ children }: DraggableProviderProps) => {\r\n    const [position, setPosition] = useState<{[key:string]:{x:number,y:number}}>({})\r\n    const [initialPosition,setInitialPosition]=useState<{[key:string]:{x:number,y:number}}>({})\r\n    const canvasRef = useRef<HTMLDivElement  | null>(null);\r\n\r\n// lưu vị trí ban đầu của hình\r\nconst handleStart=(id:string)=>(e:DraggableData,data:DraggableData)=>{\r\n    setInitialPosition(prev=>({\r\n        ...prev,[id]:{x:data.x,y:data.y}\r\n    }))\r\n}\r\n\r\n    // hàm xử lý khi việc kéo kết thúc\r\n    const handleStop = (id:string)=>(e: DraggableEvent, data: DraggableData) => {\r\n        if (canvasRef.current) {\r\n            const canvasRect = canvasRef.current.getBoundingClientRect();\r\n            const itemRect = (e.target as HTMLElement).getBoundingClientRect();\r\n\r\n\r\n            // kiểm tra xem hình có nằm ngoài canvas không\r\n            if (\r\n                itemRect.left < canvasRect.left ||\r\n                itemRect.right > canvasRect.right ||\r\n                itemRect.top < canvasRect.top ||\r\n                itemRect.bottom > canvasRect.bottom\r\n            ) {\r\n                setPosition(prevPositons=>({\r\n                    ...prevPositons,[id]:initialPosition[id]\r\n                }))\r\n            }else{\r\n                setPosition(prevPositions=>({\r\n                    ...prevPositions,[id]:{x: data.lastX, y: data.lastY}\r\n                }))\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <DraggableContext.Provider  value={{ position, handleStop }}>\r\n            <div ref={canvasRef}>\r\n                {children}\r\n            </div>\r\n        </DraggableContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}