[{"D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\index.tsx":"1","D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\App.tsx":"2","D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Generals\\Rectangle.tsx":"3","D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Generals\\Circle.tsx":"4","D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\contexts\\DraggableContext.tsx":"5","D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Generals\\DraggableItem.tsx":"6","D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Canvas\\Canvas.tsx":"7","D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Library\\ShapesList.tsx":"8","D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Library\\Library.tsx":"9","D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Library\\LinksList.tsx":"10"},{"size":300,"mtime":1696901136521,"results":"11","hashOfConfig":"12"},{"size":667,"mtime":1697368199448,"results":"13","hashOfConfig":"12"},{"size":546,"mtime":1696908539430,"results":"14","hashOfConfig":"12"},{"size":552,"mtime":1696904782918,"results":"15","hashOfConfig":"12"},{"size":3191,"mtime":1697295579180,"results":"16","hashOfConfig":"12"},{"size":4276,"mtime":1697185730026,"results":"17","hashOfConfig":"12"},{"size":6657,"mtime":1697433040210,"results":"18","hashOfConfig":"12"},{"size":1274,"mtime":1697209238696,"results":"19","hashOfConfig":"12"},{"size":889,"mtime":1697209250541,"results":"20","hashOfConfig":"12"},{"size":968,"mtime":1697304053945,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1wai8s2",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\index.tsx",[],[],["55"],"D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\App.tsx",[],[],"D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Generals\\Rectangle.tsx",[],[],"D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Generals\\Circle.tsx",[],[],["56"],"D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\contexts\\DraggableContext.tsx",[],[],"D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Generals\\DraggableItem.tsx",[],[],"D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Canvas\\Canvas.tsx",["57"],[],"import React, { useCallback, useEffect, useState, useMemo } from \"react\";\r\nimport { useDraggable } from \"../../contexts/DraggableContext\";\r\nimport Draggable from \"react-draggable\";\r\nimport DocViewer, { DocViewerRenderers } from \"@cyntler/react-doc-viewer\";\r\nimport { DraggableItem } from \"../Generals/DraggableItem\";\r\nimport { ShapeType } from \"../../contexts/DraggableContext\";\r\n\r\nconst DocumentViewer = React.memo(\r\n  ({ uri ,isDraggingFromLibrary}: { uri: string; isDraggingFromLibrary: boolean }) => {\r\n    return (\r\n      <div\r\n        className=\"pdf\"\r\n        style={{\r\n          height: \"600px\",\r\n          width: \"100%\",\r\n          overflow: \"hidden\",\r\n          position: \"relative\",\r\n        \r\n        }}\r\n      >\r\n        <DocViewer\r\n          documents={[\r\n            {\r\n              uri: uri,\r\n              fileType: uri\r\n                .substring(uri.length - 6)\r\n                .split(\".\")\r\n                .pop(),\r\n              fileName:\r\n                \"remote \" +\r\n                uri\r\n                  .substring(uri.length - 6)\r\n                  .split(\".\")\r\n                  .pop() +\r\n                \" file\",\r\n            },\r\n          ]}\r\n          pluginRenderers={DocViewerRenderers}\r\n          theme={{\r\n            primary: \"#5296d8\",\r\n            secondary: \"#ffffff\",\r\n            tertiary: \"#5296d899\",\r\n            textPrimary: \"#ffffff\",\r\n            textSecondary: \"#5296d8\",\r\n            textTertiary: \"#00000099\",\r\n            disableThemeScrollbar: true,\r\n          }}\r\n        \r\n        />\r\n      </div>\r\n    );\r\n  }\r\n);\r\nconst Shapes = React.memo(\r\n  ({\r\n    canvasItems,\r\n    setSelectedShapeId,\r\n    selectedShapeId,\r\n    updatePosition,\r\n    handleDragStart,\r\n    handleDragEnd,\r\n  }: {\r\n    canvasItems: any[];\r\n    setSelectedShapeId: any;\r\n    selectedShapeId: number | null;\r\n    updatePosition: any;\r\n    handleDragStart: any;\r\n    handleDragEnd: any;\r\n  }) => {\r\n    return (\r\n      <>\r\n        {canvasItems.map((item) => (\r\n          <Draggable\r\n            key={item.id}\r\n            position={{ x: item.position.x, y: item.position.y }}\r\n            onStart={handleDragStart}\r\n            onStop={(e, data) => {\r\n              handleDragEnd();\r\n              updatePosition(item.id, { x: data.x, y: data.y });\r\n            }}\r\n          >\r\n            <div\r\n              data-source=\"library\"\r\n              style={{\r\n                position: \"fixed\",\r\n                top: item.position.y,\r\n                left: item.position.x,\r\n                zIndex: \"1001\",\r\n              }}\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                setSelectedShapeId(item.id);\r\n              }}\r\n            >\r\n              <DraggableItem\r\n                type={item.type}\r\n                id={item.id}\r\n                isSelected={selectedShapeId === item.id}\r\n                style={{ position: \"absolute\" }}\r\n                text={item.text || \"\"}\r\n              />\r\n            </div>\r\n          </Draggable>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport const Canvas = () => {\r\n  const {\r\n    canvasItems: initialCanvasItems,\r\n    addItemToCanvas,\r\n    undoCanvasAction,\r\n    uri,\r\n  } = useDraggable();\r\n  const [canvasItems, setCanvasItems] = useState(initialCanvasItems);\r\n  const [selectedShapeId, setSelectedShapeId] = useState<number | null>(null);\r\n  const [isDraggingFromLibrary, setIsDraggingFromLibrary] = useState(false);\r\n\r\n  const handleDrop = useCallback(\r\n    (e: React.DragEvent<HTMLDivElement>) => {\r\n      e.preventDefault();\r\n      const type = e.dataTransfer.getData(\"type\") as ShapeType;\r\n      const source = e.dataTransfer.getData(\"source\");\r\n      const canvasRect = e.currentTarget.getBoundingClientRect();\r\n      const position = {\r\n        x: e.clientX - canvasRect.left,\r\n        y: e.clientY - canvasRect.top,\r\n      };\r\n      if (source === \"library\") {\r\n        addItemToCanvas({ type, id: Date.now(), isSelected: false }, position);\r\n      }\r\n    },\r\n    [addItemToCanvas]\r\n  );\r\n  const handleDragStart = useCallback((e: React.DragEvent) => {\r\n    const target = e.target as HTMLElement;\r\n    if (target.getAttribute(\"data-source\") === \"library\") {\r\n      setIsDraggingFromLibrary(true);\r\n    } else {\r\n      setIsDraggingFromLibrary(false);\r\n    }\r\n  }, []);\r\n\r\n  const handleDragEnd = useCallback(() => {\r\n    setIsDraggingFromLibrary(false);\r\n  }, []);\r\n\r\n  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setCanvasItems(initialCanvasItems);\r\n  }, [initialCanvasItems]);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === \"Delete\" && selectedShapeId !== null) {\r\n        setCanvasItems((prevItems) =>\r\n          prevItems.filter((item) => item.id !== selectedShapeId)\r\n        );\r\n        setSelectedShapeId(null);\r\n      }\r\n      if (event.ctrlKey && event.key === \"z\") {\r\n        undoCanvasAction();\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n  }, [selectedShapeId, undoCanvasAction]);\r\n\r\n  const updatePosition = (id: number, position: { x: number; y: number }) => {\r\n    setCanvasItems((prevItems) => {\r\n      const itemToUpdate = prevItems.find((i) => i.id === id);\r\n      if (\r\n        itemToUpdate &&\r\n        (itemToUpdate.position.x !== position.x ||\r\n          itemToUpdate.position.y !== position.y)\r\n      ) {\r\n        return prevItems.map((i) => (i.id === id ? { ...i, position } : i));\r\n      }\r\n      return prevItems;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onDrop={handleDrop}\r\n      onDragOver={handleDragOver}\r\n      onClick={() => setSelectedShapeId(null)}\r\n      style={{\r\n        border: \"1px solid black\",\r\n        minHeight: \"900px\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      {isDraggingFromLibrary && (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            zIndex: 1000, \r\n            pointerEvents: isDraggingFromLibrary ? \"auto\":\"none\",\r\n            backgroundColor: \"rgba(255, 255, 255, 0.01)\",\r\n          }}\r\n        ></div>\r\n      )}\r\n      <Shapes\r\n        canvasItems={canvasItems}\r\n        setSelectedShapeId={setSelectedShapeId}\r\n        selectedShapeId={selectedShapeId}\r\n        updatePosition={updatePosition}\r\n        handleDragStart={handleDragStart}\r\n        handleDragEnd={handleDragEnd}\r\n      />\r\n      <DocumentViewer uri={uri} isDraggingFromLibrary={isDraggingFromLibrary} />\r\n    </div>\r\n  );\r\n};\r\n","D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Library\\ShapesList.tsx",[],[],"D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Library\\Library.tsx",[],[],"D:\\rikkei\\bearcle\\React Typescript\\react-ts-file\\src\\components\\Library\\LinksList.tsx",[],[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"58","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":51,"nodeType":"63","messageId":"64","endLine":1,"endColumn":58},"no-new-object",["65"],["65"],"@typescript-eslint/no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","no-object-constructor"]